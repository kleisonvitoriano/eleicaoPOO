class Pessoa {
    - nome: String
    - cpf: String
    - dataNascimento: LocalDate

    + Pessoa(nome: String, cpf: String, dataNascimento: LocalDate)
    + getNome(): String
    + getCpf(): String
    + getDataNascimento(): LocalDate
    + getIdade(): int
}

class Aluno extends Pessoa {
    - matricula: String
    - curso: String

    + Aluno(nome: String, cpf: String, dataNascimento: LocalDate, matricula: String, curso: String)
    + getMatricula(): String
    + getCurso(): String
}

class Servidor extends Pessoa {
    - matriculaFuncional: String
    - titulacao: String
    - tempoEfetivoServico: int
    - campusLotacao: String

    + Servidor(nome: String, cpf: String, dataNascimento: LocalDate, matriculaFuncional: String, titulacao: String, tempoEfetivoServico: int, campusLotacao: String)
    + getMatriculaFuncional(): String
    + getTitulacao(): String
    + getTempoEfetivoServico(): int
    + getCampusLotacao(): String
}

class ServidorEfetivo extends Servidor {
    - tempoGestao: int

    + ServidorEfetivo(nome: String, cpf: String, dataNascimento: LocalDate, matriculaFuncional: String, titulacao: String, tempoEfetivoServico: int, campusLotacao: String, tempoGestao: int)
    + getTempoGestao(): int
}

class ServidorTemporario extends Servidor {
    + ServidorTemporario(nome: String, cpf: String, dataNascimento: LocalDate, matriculaFuncional: String, titulacao: String, tempoEfetivoServico: int, campusLotacao: String)
}







+---------------------+
|       Pessoa        |
+---------------------+
| - nome: String      |
| - cpf: String       |
| - dataNascimento: LocalDate |
+---------------------+
| + Pessoa(nome, cpf, dataNascimento) |
| + getNome(): String                 |
| + getCpf(): String                  |
| + getDataNascimento(): LocalDate    |
| + getIdade(): int                   |
+---------------------+

           ▲
           |
+---------------------+
|       Aluno         |
|    extends Pessoa   |
+---------------------+
| - matricula: String |
| - curso: String     |
+---------------------+
| + Aluno(nome, cpf, dataNascimento, matricula, curso) |
| + getMatricula(): String                             |
| + getCurso(): String                                 |
+---------------------+

           ▲
           |
+---------------------+
|      Servidor       |
|    extends Pessoa   |
+---------------------+
| - matriculaFuncional: String |
| - titulacao: String          |
| - tempoEfetivoServico: int   |
| - campusLotacao: String      |
+---------------------+
| + Servidor(...)               |
| + getMatriculaFuncional(): String |
| + getTitulacao(): String      |
| + getTempoEfetivoServico(): int |
| + getCampusLotacao(): String  |
+---------------------+

           ▲
           |
+---------------------+
|     Candidato       |
|    extends Servidor |
+---------------------+
| - numero: int       |
| - corCampanha: String |
| - votosDocentes: int |
| - votosDiscentes: int|
| - votosTecnicos: int |
+---------------------+
| + Candidato(...)     |
| + getNumero(): int    |
| + getCorCampanha(): String |
| + registrarVotoDocente()   |
| + registrarVotoDiscente()  |
| + registrarVotoTecnico()   |
| + getVotosDocentes(): int  |
| + getVotosDiscentes(): int |
| + getVotosTecnicos(): int  |
+---------------------+

+---------------------+
|    UrnaEletronica   |
+---------------------+
| - candidatos: List<Candidato> |
| - eleitores: List<Pessoa>     |
| - votosBrancos: int           |
| - votosNulos: int             |
+---------------------+
| + UrnaEletronica(...)         |
| + registrarVoto(numeroCandidato: int) |
| + getVotosBrancos(): int      |
| + getVotosNulos(): int        |
| + exibirResultado()           |
+---------------------+


```uml
@startuml

class Pessoa {
    - nome: String
    - cpf: String
    - dataNascimento: LocalDate
    - matricula: String
    + Pessoa(nome: String, cpf: String, dataNascimento: LocalDate, matricula: String)
    + getNome(): String
    + getCpf(): String
    + getDataNascimento(): LocalDate
    + getMatricula(): String
    + getIdade(): int
}

abstract class Servidor extends Pessoa {
    - campus: String
    - titulacao: Titulacao
    - efetivo: boolean
    + Servidor(nome: String, cpf: String, dataNascimento: LocalDate, matricula: String, campus: String, titulacao: Titulacao, efetivo: boolean)
    + getCampus(): String
    + getTitulacao(): Titulacao
    + isEfetivo(): boolean
}

class Docente extends Servidor {
    - tempoEfetivoServico: int
    - tempoCargoGestao: int
    + Docente(nome: String, cpf: String, dataNascimento: LocalDate, matricula: String, campus: String, titulacao: Titulacao, efetivo: boolean, tempoEfetivoServico: int, tempoCargoGestao: int)
    + getTempoEfetivoServico(): int
    + getTempoCargoGestao(): int
    + elegivel(): boolean
}

class TecnicoAdministrativo extends Servidor {
    - tempoEfetivoServico: int
    - tempoCargoGestao: int
    + TecnicoAdministrativo(nome: String, cpf: String, dataNascimento: LocalDate, matricula: String, campus: String, titulacao: Titulacao, efetivo: boolean, tempoEfetivoServico: int, tempoCargoGestao: int)
    + getTempoEfetivoServico(): int
    + getTempoCargoGestao(): int
    + elegivel(): boolean
}

class Aluno extends Pessoa {
    - curso: String
    + Aluno(nome: String, cpf: String, dataNascimento: LocalDate, matricula: String, curso: String)
    + getCurso(): String
}

class Candidato {
    - servidor: Servidor
    - numero: int
    - cor: String
    - votosDocentes: int
    - votosDiscentes: int
    - votosTecnicos: int
    + Candidato(servidor: Servidor, numero: int, cor: String)
    + getServidor(): Servidor
    + getNumero(): int
    + getCor(): String
    + registrarVoto(categoria: String): void
    + calcularPercentual(totalDocentes: int, totalDiscentes: int, totalTecnicos: int): double
    + getTotalVotosAbsolutos(): int
}

class UrnaEletronica {
    - candidatos: List<Candidato>
    - eleitoresVotantes: Set<String>
    - eleitoresQueVotaram: Set<String>
    - responsavel: Servidor
    - votacaoEmAndamento: boolean
    - votosBrancos: int
    - votosNulos: int
    - totaisPorCategoria: Map<String, Integer>
    + UrnaEletronica(responsavel: Servidor)
    + iniciarEleicao(eleitores: List<Pessoa>): void
    + registrarCandidato(candidato: Candidato): void
    + podeVotar(matricula: String): boolean
    + registrarVoto(matricula: String, numeroVoto: int): void
    + finalizarEleicao(): void
}

enum Titulacao {
    GRADUACAO,
    ESPECIALIZACAO,
    MESTRADO,
    DOUTORADO
}

// Relacionamentos
Pessoa <|-- Servidor
Servidor <|-- Docente
Servidor <|-- TecnicoAdministrativo
Pessoa <|-- Aluno
Servidor "1" -- "1" Candidato : é
UrnaEletronica "1" -- "*" Candidato : gerencia

@enduml
```





LINK DIAGRAMA: https://lucid.app/lucidchart/dc7967b8-7db7-4a58-bacd-7f23904a3400/edit?view_items=EkINJZYDE2qK&invitationId=inv_5c2ab6d0-02fb-4c29-b891-fdbf1eab8ece

